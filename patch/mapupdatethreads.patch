From d3dafef20a8a6a4cc56112b3d62fc25f24356ec1 Mon Sep 17 00:00:00 2001
From: ysfllxcn <ysfllxcn@live.com>
Date: Tue, 8 Oct 2013 03:04:44 +0800
Subject: [PATCH] Add: MapUpdate.Threads system

---
 src/game/CMakeLists.txt                  |   2 +
 src/game/MapManager.cpp                  |  21 ++++-
 src/game/MapManager.h                    |   3 +-
 src/game/MapUpdater.cpp                  | 151 +++++++++++++++++++++++++++++++
 src/game/MapUpdater.h                    |  62 +++++++++++++
 src/game/World.cpp                       |   1 +
 src/game/World.h                         |   1 +
 src/shared/CMakeLists.txt                |   3 +
 src/shared/DelayExecutor.cpp             | 133 +++++++++++++++++++++++++++
 src/shared/DelayExecutor.h               |  59 ++++++++++++
 src/worldserver/worldserver.conf.dist.in |   5 +
 11 files changed, 439 insertions(+), 2 deletions(-)
 create mode 100644 src/game/MapUpdater.cpp
 create mode 100644 src/game/MapUpdater.h
 create mode 100644 src/shared/DelayExecutor.cpp
 create mode 100644 src/shared/DelayExecutor.h

diff --git a/src/game/CMakeLists.txt b/src/game/CMakeLists.txt
index c9f353f..5886648 100644
--- a/src/game/CMakeLists.txt
+++ b/src/game/CMakeLists.txt
@@ -343,6 +343,8 @@ set(SRC_GRP_WORLD_HANDLERS
     MapManager.h
     MapPersistentStateMgr.cpp
     MapPersistentStateMgr.h
+    MapUpdater.cpp
+    MapUpdater.h
     MassMailMgr.cpp
     MassMailMgr.h
     MiscHandler.cpp
diff --git a/src/game/MapManager.cpp b/src/game/MapManager.cpp
index 1109e91..d5cf394 100644
--- a/src/game/MapManager.cpp
+++ b/src/game/MapManager.cpp
@@ -52,6 +52,12 @@
 void
 MapManager::Initialize()
 {
+  int num_threads(sWorld.getConfig(CONFIG_UINT32_NUMTHREADS));
+
+    // Start mtmaps if needed.
+    if (num_threads > 0 && m_updater.activate(num_threads) == -1)
+        abort();
+
     InitStateMachine();
     InitMaxInstanceId();
 }
@@ -175,7 +181,15 @@ void MapManager::Update(uint32 diff)
         return;
 
     for (MapMapType::iterator iter = i_maps.begin(); iter != i_maps.end(); ++iter)
-        iter->second->Update((uint32)i_timer.GetCurrent());
+     {
+        if (m_updater.activated())
+           m_updater.schedule_update(*iter->second, (uint32)i_timer.GetCurrent());
+        else
+            iter->second->Update((uint32)i_timer.GetCurrent());
+    }
+
+    if (m_updater.activated())
+        m_updater.wait();
 
     for (TransportSet::iterator iter = m_Transports.begin(); iter != m_Transports.end(); ++iter)
     {
@@ -238,6 +252,9 @@ void MapManager::UnloadAll()
     }
 
     TerrainManager::Instance().UnloadAll();
+
+    if (m_updater.activated())
+        m_updater.deactivate();
 }
 
 void MapManager::InitMaxInstanceId()
@@ -254,6 +271,8 @@ void MapManager::InitMaxInstanceId()
 
 uint32 MapManager::GetNumInstances()
 {
+    Guard guard(*this);
+
     uint32 ret = 0;
     for (MapMapType::iterator itr = i_maps.begin(); itr != i_maps.end(); ++itr)
     {
diff --git a/src/game/MapManager.h b/src/game/MapManager.h
index 7f5113f..f8aaa6b 100644
--- a/src/game/MapManager.h
+++ b/src/game/MapManager.h
@@ -25,6 +25,7 @@
 #include "ace/Recursive_Thread_Mutex.h"
 #include "Map.h"
 #include "GridStates.h"
+#include "MapUpdater.h"
 
 class Transport;
 class BattleGround;
@@ -178,7 +179,7 @@ class BLIZZLIKE_DLL_DECL MapManager : public BlizzLike::Singleton<MapManager, Bl
         uint32 i_gridCleanUpDelay;
         MapMapType i_maps;
         IntervalTimer i_timer;
-
+        MapUpdater m_updater;
         uint32 i_MaxInstanceId;
 };
 
diff --git a/src/game/MapUpdater.cpp b/src/game/MapUpdater.cpp
new file mode 100644
index 0000000..18429b9
--- /dev/null
+++ b/src/game/MapUpdater.cpp
@@ -0,0 +1,151 @@
+/*
+* This file is part of the BlizzLikeCore Project. See CREDITS and LICENSE files
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 3 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the Free Software
+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+/// \addtogroup worldserver
+/// @{
+/// \file
+
+#include "MapUpdater.h"
+#include "DelayExecutor.h"
+#include "Map.h"
+#include "Database/DatabaseEnv.h"
+
+#include <ace/Guard_T.h>
+#include <ace/Method_Request.h>
+
+class WDBThreadStartReq1 : public ACE_Method_Request
+{
+public:
+
+	WDBThreadStartReq1()
+	{
+	}
+
+	virtual int call()
+	{
+		WorldDatabase.ThreadStart();
+		return 0;
+	}
+};
+
+class WDBThreadEndReq1 : public ACE_Method_Request
+{
+public:
+
+	WDBThreadEndReq1()
+	{
+	}
+
+	virtual int call()
+	{
+		WorldDatabase.ThreadEnd();
+		return 0;
+	}
+};
+
+class MapUpdateRequest : public ACE_Method_Request
+{
+private:
+
+	Map& m_map;
+	MapUpdater& m_updater;
+	ACE_UINT32 m_diff;
+
+public:
+
+	MapUpdateRequest(Map& m, MapUpdater& u, ACE_UINT32 d)
+		: m_map(m), m_updater(u), m_diff(d)
+	{
+	}
+
+	virtual int call()
+	{
+		m_map.Update (m_diff);
+		m_updater.update_finished ();
+		return 0;
+	}
+};
+
+MapUpdater::MapUpdater()
+	: m_mutex(), m_condition(m_mutex), m_executor(), pending_requests(0)
+{
+}
+
+MapUpdater::~MapUpdater()
+{
+	deactivate();
+}
+
+int MapUpdater::activate(size_t num_threads)
+{
+	return m_executor.activate((int)num_threads, new WDBThreadStartReq1, new WDBThreadEndReq1);
+}
+
+int MapUpdater::deactivate()
+{
+	wait();
+
+	return m_executor.deactivate();
+}
+
+int MapUpdater::wait()
+{
+	ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, m_mutex, -1);
+
+	while (pending_requests > 0)
+		m_condition.wait();
+
+	return 0;
+}
+
+int MapUpdater::schedule_update(Map& map, ACE_UINT32 diff)
+{
+	ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, m_mutex, -1);
+
+	++pending_requests;
+
+	if (m_executor.execute(new MapUpdateRequest(map, *this, diff)) == -1)
+	{
+		ACE_DEBUG((LM_ERROR, ACE_TEXT("(%t) \n"), ACE_TEXT("Failed to schedule Map Update")));
+
+		--pending_requests;
+		return -1;
+	}
+
+	return 0;
+}
+
+bool MapUpdater::activated()
+{
+	return m_executor.activated();
+}
+
+void MapUpdater::update_finished()
+{
+	ACE_GUARD(ACE_Thread_Mutex, guard, m_mutex);
+
+	if (pending_requests == 0)
+	{
+		ACE_ERROR((LM_ERROR, ACE_TEXT("(%t)\n"), ACE_TEXT("MapUpdater::update_finished BUG, report to devs")));
+		return;
+	}
+
+	--pending_requests;
+
+	m_condition.broadcast();
+}
\ No newline at end of file
diff --git a/src/game/MapUpdater.h b/src/game/MapUpdater.h
new file mode 100644
index 0000000..bc8bd6a
--- /dev/null
+++ b/src/game/MapUpdater.h
@@ -0,0 +1,62 @@
+/*
+* This file is part of the BlizzLikeCore Project. See CREDITS and LICENSE files
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 3 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the Free Software
+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+/// \addtogroup worldserver
+/// @{
+/// \file
+
+#ifndef _MAP_UPDATER_H_INCLUDED
+#define _MAP_UPDATER_H_INCLUDED
+
+#include <ace/Thread_Mutex.h>
+#include <ace/Condition_Thread_Mutex.h>
+
+#include "DelayExecutor.h"
+
+class Map;
+
+class MapUpdater
+{
+public:
+
+	MapUpdater();
+	virtual ~MapUpdater();
+
+	friend class MapUpdateRequest;
+
+	int schedule_update(Map& map, ACE_UINT32 diff);
+
+	int wait();
+
+	int activate(size_t num_threads);
+
+	int deactivate();
+
+	bool activated();
+
+private:
+
+	DelayExecutor m_executor;
+	ACE_Condition_Thread_Mutex m_condition;
+	ACE_Thread_Mutex m_mutex;
+	size_t pending_requests;
+
+	void update_finished();
+};
+
+#endif //_MAP_UPDATER_H_INCLUDED
\ No newline at end of file
diff --git a/src/game/World.cpp b/src/game/World.cpp
index dde5a49..96bd097 100644
--- a/src/game/World.cpp
+++ b/src/game/World.cpp
@@ -523,6 +523,7 @@ void World::LoadConfigSettings(bool reload)
     setConfigMin(CONFIG_UINT32_INTERVAL_GRIDCLEAN, "GridCleanUpDelay", 5 * MINUTE * IN_MILLISECONDS, MIN_GRID_DELAY);
     if (reload)
         sMapMgr.SetGridCleanUpDelay(getConfig(CONFIG_UINT32_INTERVAL_GRIDCLEAN));
+    setConfig(CONFIG_UINT32_NUMTHREADS, "MapUpdate.Threads", 2);
 
     setConfigMin(CONFIG_UINT32_INTERVAL_MAPUPDATE, "MapUpdateInterval", 100, MIN_MAP_UPDATE_DELAY);
     if (reload)
diff --git a/src/game/World.h b/src/game/World.h
index cc25fcd..52e3e03 100644
--- a/src/game/World.h
+++ b/src/game/World.h
@@ -175,6 +175,7 @@ enum eConfigUInt32Values
     CONFIG_UINT32_CHARDELETE_KEEP_DAYS,
     CONFIG_UINT32_CHARDELETE_METHOD,
     CONFIG_UINT32_CHARDELETE_MIN_LEVEL,
+    CONFIG_UINT32_NUMTHREADS,
     CONFIG_UINT32_GUID_RESERVE_SIZE_CREATURE,
     CONFIG_UINT32_GUID_RESERVE_SIZE_GAMEOBJECT,
     CONFIG_UINT32_VALUE_COUNT
diff --git a/src/shared/CMakeLists.txt b/src/shared/CMakeLists.txt
index 39acb8a..2065a98 100644
--- a/src/shared/CMakeLists.txt
+++ b/src/shared/CMakeLists.txt
@@ -78,6 +78,9 @@ set(SRC_GRP_UTIL
     ByteBuffer.cpp
     ByteBuffer.h
     Errors.h
+    DelayExecutor.cpp
+    DelayExecutor.h
+    SystemConfig.h
     # dep/include/mersennetwister/MersenneTwister.h is part of this group in the VC 2012 file but it is not part of src/shared, so it is omitted here
     ProgressBar.cpp
     ProgressBar.h
diff --git a/src/shared/DelayExecutor.cpp b/src/shared/DelayExecutor.cpp
new file mode 100644
index 0000000..ed6afc0
--- /dev/null
+++ b/src/shared/DelayExecutor.cpp
@@ -0,0 +1,133 @@
+/*
+* This file is part of the BlizzLikeCore Project. See CREDITS and LICENSE files
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 3 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the Free Software
+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+/// \addtogroup worldserver
+/// @{
+/// \file
+
+#include <ace/Singleton.h>
+#include <ace/Thread_Mutex.h>
+#include <ace/Log_Msg.h>
+
+#include "../shared/DelayExecutor.h"
+
+DelayExecutor* DelayExecutor::instance()
+{
+	return ACE_Singleton<DelayExecutor, ACE_Thread_Mutex>::instance();
+}
+
+DelayExecutor::DelayExecutor()
+	: activated_(false), pre_svc_hook_(0), post_svc_hook_(0)
+{
+}
+
+DelayExecutor::~DelayExecutor()
+{
+	if (pre_svc_hook_)
+		delete pre_svc_hook_;
+
+	if (post_svc_hook_)
+		delete post_svc_hook_;
+
+	deactivate();
+}
+
+int DelayExecutor::deactivate()
+{
+	if (!activated())
+		return -1;
+
+	activated(false);
+	queue_.queue()->deactivate();
+	wait();
+
+	return 0;
+}
+
+int DelayExecutor::svc()
+{
+	if (pre_svc_hook_)
+		pre_svc_hook_->call();
+
+	for (;;)
+	{
+		ACE_Method_Request* rq = queue_.dequeue();
+
+		if (!rq)
+			break;
+
+		rq->call();
+		delete rq;
+	}
+
+	if (post_svc_hook_)
+		post_svc_hook_->call();
+
+	return 0;
+}
+
+int DelayExecutor::activate(int num_threads, ACE_Method_Request* pre_svc_hook, ACE_Method_Request* post_svc_hook)
+{
+	if (activated())
+		return -1;
+
+	if (num_threads < 1)
+		return -1;
+
+	if (pre_svc_hook_)
+		delete pre_svc_hook_;
+
+	if (post_svc_hook_)
+		delete post_svc_hook_;
+
+	pre_svc_hook_ = pre_svc_hook;
+	post_svc_hook_ = post_svc_hook;
+
+	queue_.queue()->activate();
+
+	if (ACE_Task_Base::activate(THR_NEW_LWP | THR_JOINABLE | THR_INHERIT_SCHED, num_threads) == -1)
+		return -1;
+
+	activated(true);
+
+	return true;
+}
+
+int DelayExecutor::execute(ACE_Method_Request* new_req)
+{
+	if (new_req == NULL)
+		return -1;
+
+	if (queue_.enqueue(new_req, (ACE_Time_Value*)&ACE_Time_Value::zero) == -1)
+	{
+		delete new_req;
+		ACE_ERROR_RETURN((LM_ERROR, ACE_TEXT("(%t) %p\n"), ACE_TEXT("DelayExecutor::execute enqueue")), -1);
+	}
+
+	return 0;
+}
+
+bool DelayExecutor::activated()
+{
+	return activated_;
+}
+
+void DelayExecutor::activated(bool s)
+{
+	activated_ = s;
+}
\ No newline at end of file
diff --git a/src/shared/DelayExecutor.h b/src/shared/DelayExecutor.h
new file mode 100644
index 0000000..f0c9e42
--- /dev/null
+++ b/src/shared/DelayExecutor.h
@@ -0,0 +1,59 @@
+/*
+* This file is part of the BlizzLikeCore Project. See CREDITS and LICENSE files
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 3 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the Free Software
+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+/// \addtogroup worldserver
+/// @{
+/// \file
+
+#ifndef _M_DELAY_EXECUTOR_H
+#define _M_DELAY_EXECUTOR_H
+
+#include <ace/Task.h>
+#include <ace/Activation_Queue.h>
+#include <ace/Method_Request.h>
+
+class DelayExecutor : protected ACE_Task_Base
+{
+public:
+
+	DelayExecutor();
+	virtual ~DelayExecutor();
+
+	static DelayExecutor* instance();
+
+	int execute(ACE_Method_Request* new_req);
+
+	int activate(int num_threads = 1, ACE_Method_Request* pre_svc_hook = NULL, ACE_Method_Request* post_svc_hook = NULL);
+
+	int deactivate();
+
+	bool activated();
+
+	virtual int svc();
+
+private:
+
+	ACE_Activation_Queue queue_;
+	ACE_Method_Request* pre_svc_hook_;
+	ACE_Method_Request* post_svc_hook_;
+	bool activated_;
+
+	void activated(bool s);
+};
+
+#endif // _M_DELAY_EXECUTOR_H
\ No newline at end of file
diff --git a/src/worldserver/worldserver.conf.dist.in b/src/worldserver/worldserver.conf.dist.in
index c936789..dacb446 100644
--- a/src/worldserver/worldserver.conf.dist.in
+++ b/src/worldserver/worldserver.conf.dist.in
@@ -197,6 +197,10 @@ BindIP = "0.0.0.0"
 #        Default: 1 (Enable)
 #                 0 (Disabled)
 #
+#    MapUpdate.Threads
+#        Number of threads to run if the binary was compiled with mtmaps support.
+#        Default: 2
+#
 ###################################################################################################################
 
 UseProcessors = 0
@@ -224,6 +228,7 @@ UpdateUptimeInterval = 10
 MaxCoreStuckTime = 0
 AddonChannel = 1
 CleanCharacterDB = 1
+MapUpdate.Threads = 2
 
 ###################################################################################################################
 # SERVER LOGGING
-- 
1.8.4

